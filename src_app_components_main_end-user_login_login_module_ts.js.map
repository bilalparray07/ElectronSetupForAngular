{"version":3,"file":"src_app_components_main_end-user_login_login_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACiD;AACwD;AAC3C;;;;;AAYxD,MAAOI,cAAe,SAAQD,uEAAa;EAC7CE,YAAYC,cAA8B,EAAEC,YAA0B,EAClEC,yBAAoD;IAAA,IAAAC,KAAA;IACpD,KAAK,CAACH,cAAc,EAAEC,YAAY,EAAEC,yBAAyB,CAAC;IAAAC,KAAA,GAAAC,IAAA;IAElE,KAAAC,aAAa;MAAA,IAAAC,IAAA,GAAAC,+HAAA,CAAG,WAAOC,cAA0C,EAA2C;QACxG,IAAIC,IAAI,SAASN,KAAI,CAACO,gBAAgB,CACjC,GAAGhB,2DAAY,CAACiB,OAAO,CAACC,WAAW,gCAAgC,EAAE,MAAM,EAAEJ,cAAc,EACxF,IAAIb,iGAAwB,CAAkB,KAAK,EAAEC,uFAAc,CAACiB,KAAK,CAAC,CAAC;QACnF,OAAOJ,IAAI;MACf,CAAC;MAAA,iBAAAK,EAAA;QAAA,OAAAR,IAAA,CAAAS,KAAA,OAAAC,SAAA;MAAA;IAAA;EAND;;SAJSlB,cAAe;;mBAAfA,MAAc,EAAAmB,sDAAA,CAAAE,qEAAA,GAAAF,sDAAA,CAAAI,uEAAA,GAAAJ,sDAAA,CAAAM,mGAAA;AAAA;;SAAdzB,MAAc;EAAA2B,OAAA,EAAd3B,MAAc,CAAA4B,IAAA;EAAAC,UAAA,EAFX;AAAM;;;;;;;;;;;;;;;;;;;;ACZiC;AACJ;AACJ;AACF;;;AAE7C,MAAMK,MAAM,GAAW,CAAC;EAAEC,IAAI,EAAE,EAAE;EAAEC,SAAS,EAAEL,4DAAcA;AAAA,CAAE,CAAC;AAQ1D,MAAOM,kBAAkB;SAAlBA,kBAAkB;;mBAAlBA,MAAkB;AAAA;;QAAlBA;AAAkB;;YALnBP,yDAAY,CAACQ,QAAQ,CAACJ,MAAM,CAAC,EACrCF,yDAAY,EACZC,uDAAW,EACHH,yDAAY;AAAA;;sHAEXO,kBAAkB;IAAAE,OAAA,GAAAlB,yDAAA,EAJ3BW,yDAAY,EACZC,uDAAW;IAAAO,OAAA,GACHV,yDAAY;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACXyB;AAIO;AACiC;AACT;;;;;;AAO1E,MAAOC,cACX,SAAQU,0DAA6B;EAGrC;;;EAGAxC,YACE4C,aAA4B,EAC5BC,UAA6B,EACrBC,aAA4B;IAEpC,KAAK,CAACF,aAAa,EAAEC,UAAU,CAAC;IAFxB,KAAAC,aAAa,GAAbA,aAAa;EAGvB;EAEMC,QAAQA,CAAA;IAAA,IAAA3C,KAAA;IAAA,OAAAI,+HAAA;MACZ;MACAJ,KAAI,CAAC4C,SAAS,GAAG,IAAIN,iFAAc,EAAE;MACrCtC,KAAI,CAAC4C,SAAS,CAACC,YAAY,GAAG,IAAIN,0FAAc,EAAE;IAAC;EACrD;EAEMrC,aAAaA,CAAA;IAAA,IAAA4C,MAAA;IAAA,OAAA1C,+HAAA;MACjB,IAAI;QACF,MAAM0C,MAAI,CAACC,cAAc,CAACC,cAAc,EAAE;QAC1C;QACA,IAAI1C,IAAI,SAASwC,MAAI,CAACJ,aAAa,CAACO,aAAa,CAC/CH,MAAI,CAACF,SAAS,CAACC,YAAY,CAC5B;QACD,IAAIvC,IAAI,CAAC4C,OAAO,EAAE;UAChBJ,MAAI,CAACK,iBAAiB,CAACC,SAAS,CAAC9C,IAAI,CAAC+C,SAAS,CAAC;UAChDP,MAAI,CAACC,cAAc,CAACO,mBAAmB,CAAC;YACtCC,KAAK,EAAE,QAAQ;YACfC,IAAI,EAAElD,IAAI,CAAC+C,SAAS,CAACI,cAAc;YACnCC,KAAK,EAAE,IAAI;YACXC,QAAQ,EAAE,WAAW;YACrBC,IAAI,EAAE;WACP,CAAC;SACH,MAAM;UACL,IAAItD,IAAI,CAACuD,WAAW,CAACC,WAAW,IAAI,IAAI,EACtChB,MAAI,CAACF,SAAS,CAACmB,aAAa,GAAGzD,IAAI,CAACuD,WAAW;;OAEpD,CAAC,OAAOG,KAAK,EAAE;QACdlB,MAAI,CAACC,cAAc,CAACO,mBAAmB,CAAC;UACtCC,KAAK,EAAE,QAAQ;UACfC,IAAI,EAAEjE,2DAAY,CAAC0E,YAAY,CAACC,aAAa;UAC7CR,KAAK,EAAE,IAAI;UACXC,QAAQ,EAAE,WAAW;UACrBC,IAAI,EAAE;SACP,CAAC;QACF,MAAMI,KAAK;OACZ,SAAS;QACR,MAAMlB,MAAI,CAACC,cAAc,CAACoB,aAAa,EAAE;;IAC1C;EACH;EAEMC,YAAYA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAjE,+HAAA;MAChBiE,MAAI,CAACtB,cAAc,CAChBuB,mBAAmB,CAAC;QACnBf,KAAK,EAAE,MAAM;QACbgB,QAAQ,EAAE,UAAU;QACpBC,OAAO,EAAE,cAAc;QACvBC,SAAS,EAAE;OACZ,CAAC,CACDC,IAAI,CACFC,MAAM,IAAI;QACT;QACAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACrB,CAAC,EACAG,MAAM,IAAI;QACT;QACAF,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;MACrB,CAAC,CACF;IAAC;EACN;;SAzEWpD,cACX;;mBADWA,MAAc,EAAAZ,+DAAA,CAAAE,0EAAA,GAAAF,+DAAA,CAAAI,mFAAA,GAAAJ,+DAAA,CAAAM,0EAAA;AAAA;;QAAdM,MAAc;EAAAyD,SAAA;EAAAC,QAAA,GAAAtE,wEAAA;EAAAwE,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCd3B7E,4DAAA,aAAiB;MAGiBA,oDAAA,gBAAS;MAAAA,0DAAA,EAAQ;MAC3CA,4DAAA,eACqB;MAD0CA,wDAAA,2BAAAmF,uDAAAC,MAAA;QAAA,OAAAN,GAAA,CAAAhD,SAAA,CAAAC,YAAA,CAAAsD,OAAA,GAAAD,MAAA;MAAA,EAA4C;MAA3GpF,0DAAA,EACqB;MAEzBA,4DAAA,aAAkB;MACYA,oDAAA,eAAQ;MAAAA,0DAAA,EAAQ;MAC1CA,4DAAA,eACqB;MAD8CA,wDAAA,2BAAAsF,uDAAAF,MAAA;QAAA,OAAAN,GAAA,CAAAhD,SAAA,CAAAC,YAAA,CAAAwD,QAAA,GAAAH,MAAA;MAAA,EAA6C;MAAhHpF,0DAAA,EACqB;MAEzBA,4DAAA,aAAkB;MACkBA,wDAAA,mBAAAwF,iDAAA;QAAA,OAASV,GAAA,CAAA1F,aAAA,EAAe;MAAA,EAAC;MAAEY,oDAAA,uBAAc;MAAAA,0DAAA,EAAS;MAK1FA,4DAAA,cAAkB;MACkBA,wDAAA,mBAAAyF,iDAAA;QAAA,OAASX,GAAA,CAAAxB,YAAA,EAAc;MAAA,EAAC;MAAEtD,oDAAA,6BAAoB;MAAAA,0DAAA,EAAS;;;MAfpBA,uDAAA,GAA4C;MAA5CA,wDAAA,YAAA8E,GAAA,CAAAhD,SAAA,CAAAC,YAAA,CAAAsD,OAAA,CAA4C;MAKxCrF,uDAAA,GAA6C;MAA7CA,wDAAA,YAAA8E,GAAA,CAAAhD,SAAA,CAAAC,YAAA,CAAAwD,QAAA,CAA6C;;;;;;;;;;;;;;;;;;;;;;;;;ACRzE;AAEa;AACT;AACN;;AAavC,MAAOK,WAAW;SAAXA,WAAW;;mBAAXA,MAAW;AAAA;;QAAXA;AAAW;;YALpB/E,yDAAY,EACZK,qEAAkB,EAClBJ,uDAAW;AAAA;;sHAGF8E,WAAW;IAAAC,YAAA,GARpBjF,4DAAc;IAAAQ,OAAA,GAGdP,yDAAY,EACZK,qEAAkB,EAClBJ,uDAAW;EAAA;AAAA;;;;;;;;;;;;;;ACfT,MAAOgF,gBAAgB;;;;;;;;;;;;;;;ACA2B;AAGlD,MAAOrE,cAAe,SAAQqE,iEAAgB;;;;;;;;;;;;;;ACC9C,MAAOvE,eAAe;EAA5BzC,YAAA;IACI,KAAAiH,SAAS,GAAW,QAAQ;EAKhC;;;;;;;;;;;;;;;;;;;;;;;;ACTiD;AAEJ;AACiC;AAEN;;;AAOlE,MAAO3B,aAAc,SAAQ4B,sDAAW;EAE5ClH,YAAoBqH,aAA6B;IAC/C,KAAK,EAAE;IADW,KAAAA,aAAa,GAAbA,aAAa;EAEjC;EAEMhE,aAAaA,CAACiE,QAAwB;IAAA,IAAAlH,KAAA;IAAA,OAAAI,+HAAA;MAC1C,IAAI8G,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAACf,OAAO,IAAI,IAAI;QAAC;QACjD;UACE,MAAM,IAAIgB,KAAK,CAAC5H,2DAAY,CAAC0E,YAAY,CAACmD,kBAAkB,CAAC;SAC9D,MACI;QACH,IAAIC,UAAU,GAAG,IAAIN,sFAAU,EAAkB;QACjDG,QAAQ,CAACI,WAAW,GAAG,KAAK;QAC5BJ,QAAQ,CAACK,QAAQ,GAAGP,gFAAU,CAACQ,WAAW;QAC1CH,UAAU,CAACI,OAAO,GAAGP,QAAQ;QAC7B,aAAalH,KAAI,CAACiH,aAAa,CAAC/G,aAAa,CAACmH,UAAU,CAAC;;IAC1D;EACH;;SAlBWnC,aAAc;;mBAAdA,MAAa,EAAApE,sDAAA,CAAAE,oEAAA;AAAA;;SAAbkE,MAAa;EAAA5D,OAAA,EAAb4D,MAAa,CAAA3D,IAAA;EAAAC,UAAA,EAFZ;AAAM","sources":["./src/app/clients/accounts.client.ts","./src/app/components/main/end-user/login/login-routing.module.ts","./src/app/components/main/end-user/login/login.component.ts","./src/app/components/main/end-user/login/login.component.html","./src/app/components/main/end-user/login/login.module.ts","./src/app/models/service/token/token-request-root.ts","./src/app/models/service/token/token-request-s-m.ts","./src/app/models/view/sample.viewmodel.ts","./src/app/services/sample.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { AppConstants } from \"src/app-constants\";\r\nimport { AdditionalRequestDetails, Authentication } from \"../models/internal/additional-request-details\";\r\nimport { BaseApiClient } from \"./base-client/base-api.client\";\r\nimport { CommonResponseCodeHandler } from \"./helpers/common-response-code-handler.helper\";\r\nimport { StorageCache } from \"./helpers/storage-cache.helper\";\r\nimport { ApiRequest } from \"../models/service/api-contracts/base/api-request\";\r\nimport { ApiResponse } from \"../models/service/api-contracts/base/api-response\";\r\nimport { TokenRequestSM } from \"../models/service/token/token-request-s-m\";\r\nimport { TokenResponseSM } from \"../models/service/token/token-response-s-m\";\r\nimport { StorageService } from \"../services/storage.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AccountsClient extends BaseApiClient {\r\n    constructor(storageService: StorageService, storageCache: StorageCache,\r\n        commonResponseCodeHandler: CommonResponseCodeHandler) {\r\n        super(storageService, storageCache, commonResponseCodeHandler)\r\n    }\r\n    GenerateToken = async (tokenRequestSM: ApiRequest<TokenRequestSM>): Promise<ApiResponse<TokenResponseSM>> => {\r\n        let resp = await this.GetResponseAsync<TokenRequestSM, TokenResponseSM>\r\n            (`${AppConstants.ApiUrls.ACCOUNT_URL}/ValidateLoginAndGenerateToken`, 'POST', tokenRequestSM,\r\n                new AdditionalRequestDetails<TokenResponseSM>(false, Authentication.false));\r\n        return resp;\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nconst routes: Routes = [{ path: '', component: LoginComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes),\r\n    CommonModule,\r\n    FormsModule],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { AppConstants } from \"src/app-constants\";\r\nimport { CommonService } from \"src/app/services/common.service\";\r\nimport { LogHandlerService } from \"src/app/services/log-handler.service\";\r\nimport { SampleService } from \"src/app/services/sample.service\";\r\nimport { BaseComponent } from \"../../../base.component\";\r\nimport { SampleViewModel as LoginViewModel } from \"src/app/models/view/sample.viewmodel\";\r\nimport { TokenRequestSM } from \"src/app/models/service/token/token-request-s-m\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.css\"],\r\n})\r\nexport class LoginComponent\r\n  extends BaseComponent<LoginViewModel>\r\n  implements OnInit\r\n{\r\n  /**\r\n   *\r\n   */\r\n  constructor(\r\n    commonService: CommonService,\r\n    logService: LogHandlerService,\r\n    private sampleService: SampleService\r\n  ) {\r\n    super(commonService, logService);\r\n  }\r\n\r\n  async ngOnInit() {\r\n    // console.log(\"sldjkjsndfjk\");\r\n    this.viewModel = new LoginViewModel();\r\n    this.viewModel.tokenRequest = new TokenRequestSM();\r\n  }\r\n\r\n  async GenerateToken() {\r\n    try {\r\n      await this._commonService.presentLoading();\r\n      //have to do paging\r\n      let resp = await this.sampleService.generateToken(\r\n        this.viewModel.tokenRequest\r\n      );\r\n      if (resp.isError) {\r\n        this._exceptionHandler.logObject(resp.errorData);\r\n        this._commonService.showSweetAlertToast({\r\n          title: \"Error!\",\r\n          text: resp.errorData.displayMessage,\r\n          timer: 5000,\r\n          position: \"top-right\",\r\n          icon: \"error\",\r\n        });\r\n      } else {\r\n        if (resp.successData.accessToken != null)\r\n          this.viewModel.tokenResponse = resp.successData;\r\n      }\r\n    } catch (error) {\r\n      this._commonService.showSweetAlertToast({\r\n        title: \"Error!\",\r\n        text: AppConstants.ErrorPrompts.Unknown_Error,\r\n        timer: 5000,\r\n        position: \"top-right\",\r\n        icon: \"error\",\r\n      });\r\n      throw error;\r\n    } finally {\r\n      await this._commonService.dismissLoader();\r\n    }\r\n  }\r\n\r\n  async presentAlert() {\r\n    this._commonService\r\n      .presentConfirmAlert({\r\n        title: \"Test\",\r\n        subTitle: \"Test Sub\",\r\n        message: \"Test Message\",\r\n        showModal: true,\r\n      })\r\n      .then(\r\n        (result) => {\r\n          //means true or false\r\n          console.log(result);\r\n        },\r\n        (reason) => {\r\n          // means backdrop pressed\r\n          console.log(reason);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<div class=\"row\">\r\n\r\n    <div class=\"mb-3\">\r\n        <label class=\"form-label\">User Name</label>\r\n        <input type=\"text\" class=\"form-control\" placeholder=\"Username\" [(ngModel)]=\"viewModel.tokenRequest.loginId\"\r\n            required=\"title\">\r\n    </div>\r\n    <div class=\"mb-3\">\r\n        <label class=\"form-label\">Password</label>\r\n        <input type=\"password\" class=\"form-control\" placeholder=\"Password\" [(ngModel)]=\"viewModel.tokenRequest.password\"\r\n            required=\"title\">\r\n    </div>\r\n    <div class=\"mb-3\">\r\n        <button class=\"btn btn-primary\" (click)=\"GenerateToken()\"> Generate Token</button>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"mb-3\">\r\n    <button class=\"btn btn-primary\" (click)=\"presentAlert()\"> Sample Confirm Alert</button>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    FormsModule\r\n  ]\r\n})\r\nexport class LoginModule { }\r\n","export class TokenRequestRoot {\r\n    loginId!: string;\r\n    password!: string;\r\n}\r\n","import { TokenRequestRoot } from './token-request-root';\r\nimport { RoleTypeSM } from '../enums/role-type-s-m.enum';\r\n\r\nexport class TokenRequestSM extends TokenRequestRoot {\r\n    companyCode!: string;\r\n    roleType!: RoleTypeSM;\r\n}\r\n","import { BaseViewModel } from \"../internal/base.viewmodel\";\r\nimport { TokenRequestSM } from \"../service/token/token-request-s-m\";\r\nimport { TokenResponseSM } from \"../service/token/token-response-s-m\";\r\n\r\nexport class SampleViewModel implements BaseViewModel {\r\n    PageTitle: string = 'Sample';\r\n    userId!: string;\r\n    pwd!: string;\r\n    tokenRequest!: TokenRequestSM;\r\n    tokenResponse!: TokenResponseSM;\r\n}","import { Injectable } from '@angular/core';\r\nimport { AppConstants } from 'src/app-constants';\r\nimport { AccountsClient } from '../clients/accounts.client';\r\nimport { BaseService } from './base.service';\r\nimport { ApiRequest } from '../models/service/api-contracts/base/api-request';\r\nimport { ApiResponse } from '../models/service/api-contracts/base/api-response';\r\nimport { RoleTypeSM } from '../models/service/enums/role-type-s-m.enum';\r\nimport { TokenRequestSM } from '../models/service/token/token-request-s-m';\r\nimport { TokenResponseSM } from '../models/service/token/token-response-s-m';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SampleService extends BaseService {\r\n\r\n  constructor(private accountClient: AccountsClient) {\r\n    super();\r\n  }\r\n\r\n  async generateToken(tokenReq: TokenRequestSM): Promise<ApiResponse<TokenResponseSM>> {\r\n    if (tokenReq == null || tokenReq.loginId == null)// null checks\r\n    {\r\n      throw new Error(AppConstants.ErrorPrompts.Invalid_Input_Data);\r\n    }\r\n    else {\r\n      let apiRequest = new ApiRequest<TokenRequestSM>();\r\n      tokenReq.companyCode = '123';\r\n      tokenReq.roleType = RoleTypeSM.ClientAdmin;\r\n      apiRequest.reqData = tokenReq\r\n      return await this.accountClient.GenerateToken(apiRequest);\r\n    }\r\n  }\r\n}\r\n"],"names":["AppConstants","AdditionalRequestDetails","Authentication","BaseApiClient","AccountsClient","constructor","storageService","storageCache","commonResponseCodeHandler","_this","this","GenerateToken","_ref","_asyncToGenerator","tokenRequestSM","resp","GetResponseAsync","ApiUrls","ACCOUNT_URL","false","_x","apply","arguments","i0","ɵɵinject","i1","StorageService","i2","StorageCache","i3","CommonResponseCodeHandler","factory","ɵfac","providedIn","RouterModule","LoginComponent","CommonModule","FormsModule","routes","path","component","LoginRoutingModule","forChild","imports","exports","BaseComponent","SampleViewModel","LoginViewModel","TokenRequestSM","commonService","logService","sampleService","ngOnInit","viewModel","tokenRequest","_this2","_commonService","presentLoading","generateToken","isError","_exceptionHandler","logObject","errorData","showSweetAlertToast","title","text","displayMessage","timer","position","icon","successData","accessToken","tokenResponse","error","ErrorPrompts","Unknown_Error","dismissLoader","presentAlert","_this3","presentConfirmAlert","subTitle","message","showModal","then","result","console","log","reason","ɵɵdirectiveInject","CommonService","LogHandlerService","SampleService","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoginComponent_Template_input_ngModelChange_4_listener","$event","loginId","LoginComponent_Template_input_ngModelChange_8_listener","password","LoginComponent_Template_button_click_10_listener","LoginComponent_Template_button_click_13_listener","ɵɵadvance","ɵɵproperty","LoginModule","declarations","TokenRequestRoot","PageTitle","BaseService","ApiRequest","RoleTypeSM","accountClient","tokenReq","Error","Invalid_Input_Data","apiRequest","companyCode","roleType","ClientAdmin","reqData"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}